### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregatePost {
  _count: PostCountAggregateOutputType
  _max: PostMaxAggregateOutputType
  _min: PostMinAggregateOutputType
}

type AggregateUser {
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""BigInt custom scalar type"""
scalar BigInt

"""Date custom scalar type"""
scalar DateTime

"""Decimal custom scalar type"""
scalar Decimal

type Enum {
  fields: [String!]!
  name: String!
}

type Field {
  create: Boolean!
  editor: Boolean!
  filter: Boolean!
  id: String!
  isId: Boolean!
  kind: KindEnum!
  list: Boolean!
  name: String!
  order: Int!
  read: Boolean!
  relationField: Boolean
  required: Boolean!
  sort: Boolean!
  title: String!
  type: String!
  unique: Boolean!
  update: Boolean!
  upload: Boolean!
}

"""Json custom scalar type"""
scalar Json

enum KindEnum {
  enum
  object
  scalar
}

type Model {
  create: Boolean!
  delete: Boolean!
  displayFields: [String!]!
  fields: [Field!]!
  id: String!
  idField: String!
  name: String!
  update: Boolean!
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyPost(where: PostWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateField(data: UpdateFieldInput!, id: String!, modelId: String!): Field!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateModel(data: UpdateModelInput!, id: String!): Model!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

"""포스트"""
type Post {
  author: User
  authorId: String
  content: String!
  id: String!
  referredBlogs: [String!]!
  title: String!
}

type PostCountAggregateOutputType {
  _all: Int!
  authorId: Int!
  content: Int!
  id: Int!
  title: Int!
}

input PostCountOrderByAggregateInput {
  authorId: SortOrder
  content: SortOrder
  id: SortOrder
  title: SortOrder
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput
  content: String!
  id: String
  title: String!
}

input PostCreateManyAuthorInput {
  content: String!
  id: String
  title: String!
}

input PostCreateManyAuthorInputEnvelope {
  data: PostCreateManyAuthorInput!
  skipDuplicates: Boolean
}

input PostCreateManyInput {
  authorId: String
  content: String!
  id: String
  title: String!
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostUncheckedCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  content: String!
  id: String
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregateOutputType {
  authorId: String
  content: String
  id: String
  title: String
}

input PostMaxOrderByAggregateInput {
  authorId: SortOrder
  content: SortOrder
  id: SortOrder
  title: SortOrder
}

type PostMinAggregateOutputType {
  authorId: String
  content: String
  id: String
  title: String
}

input PostMinOrderByAggregateInput {
  authorId: SortOrder
  content: SortOrder
  id: SortOrder
  title: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithAggregationInput {
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  authorId: SortOrder
  content: SortOrder
  id: SortOrder
  title: SortOrder
}

input PostOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  content: SortOrder
  id: SortOrder
  title: SortOrder
}

enum PostScalarFieldEnum {
  authorId
  content
  id
  title
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput]
  NOT: [PostScalarWhereInput]
  OR: [PostScalarWhereInput]
  authorId: StringNullableFilter
  content: StringFilter
  id: StringFilter
  title: StringFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput]
  NOT: [PostScalarWhereWithAggregatesInput]
  OR: [PostScalarWhereWithAggregatesInput]
  authorId: StringNullableWithAggregatesFilter
  content: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
}

input PostUncheckedCreateInput {
  authorId: String
  content: String!
  id: String
  title: String!
}

input PostUncheckedCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostUncheckedCreateWithoutAuthorInput {
  content: String!
  id: String
  title: String!
}

input PostUncheckedUpdateInput {
  authorId: NullableStringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUncheckedUpdateManyInput {
  authorId: NullableStringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUncheckedUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput]
  deleteMany: [PostScalarWhereInput]
  disconnect: [PostWhereUniqueInput]
  set: [PostWhereUniqueInput]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput]
}

input PostUncheckedUpdateManyWithoutPostsInput {
  content: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUncheckedUpdateWithoutAuthorInput {
  content: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateInput {
  author: UserUpdateOneWithoutPostsInput
  content: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUncheckedUpdateManyWithoutPostsInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput]
  deleteMany: [PostScalarWhereInput]
  disconnect: [PostWhereUniqueInput]
  set: [PostWhereUniqueInput]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput]
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUncheckedUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  content: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostUncheckedCreateWithoutAuthorInput!
  update: PostUncheckedUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput]
  NOT: [PostWhereInput]
  OR: [PostWhereInput]
  author: UserWhereInput
  authorId: StringNullableFilter
  content: StringFilter
  id: StringFilter
  title: StringFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput], skip: Int, take: Int, where: PostWhereInput): AggregatePost
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): AggregateUser
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum], orderBy: [PostOrderByWithRelationInput], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): User
  findManyPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum], orderBy: [PostOrderByWithRelationInput], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  findManyPostCount(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum], orderBy: [PostOrderByWithRelationInput], skip: Int, take: Int, where: PostWhereInput): Int!
  findManyUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findManyUserCount(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): Int!
  findUniquePost(where: PostWhereUniqueInput!): Post
  findUniqueUser(where: UserWhereUniqueInput!): User
  getSchema: Schema!
}

enum QueryMode {
  default
  insensitive
}

type Schema {
  enums: [Enum!]!
  models: [Model!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input UpdateFieldInput {
  create: Boolean
  editor: Boolean
  filter: Boolean
  id: String
  isId: Boolean
  kind: KindEnum
  list: Boolean
  name: String
  order: Int
  read: Boolean
  relationField: Boolean
  required: Boolean
  sort: Boolean
  title: String
  type: String
  unique: Boolean
  update: Boolean
  upload: Boolean
}

input UpdateModelInput {
  create: Boolean
  delete: Boolean
  displayFields: [String]
  fields: [UpdateFieldInput]
  idField: String
  name: String
  update: Boolean
}

"""사용자"""
type User {
  _count: UserCountOutputType!
  id: String!
  name: String!
  posts(cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, orderBy: PostOrderByWithRelationInput, skip: Int, take: Int, where: PostWhereInput): [Post!]!
}

type UserCountAggregateOutputType {
  _all: Int!
  id: Int!
  name: Int!
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type UserCountOutputType {
  posts: Int!
}

input UserCreateInput {
  id: String
  name: String!
  posts: PostCreateNestedManyWithoutAuthorInput
}

input UserCreateManyInput {
  id: String
  name: String!
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserUncheckedCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserUncheckedCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  id: String
  name: String!
}

type UserMaxAggregateOutputType {
  id: String
  name: String
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type UserMinAggregateOutputType {
  id: String
  name: String
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  posts: PostOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  id
  name
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input UserUncheckedCreateInput {
  id: String
  name: String!
  posts: PostUncheckedCreateNestedManyWithoutAuthorInput
}

input UserUncheckedCreateWithoutPostsInput {
  id: String
  name: String!
}

input UserUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  posts: PostUncheckedUpdateManyWithoutAuthorInput
}

input UserUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpdateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserUncheckedCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUncheckedUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutPostsInput {
  create: UserUncheckedCreateWithoutPostsInput!
  update: UserUncheckedUpdateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  id: StringFilter
  name: StringFilter
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  id: String
}